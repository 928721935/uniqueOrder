<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jida.mapper.LoginUserVOMapper">
  <resultMap id="BaseResultMap" type="com.jida.entity.LoginUserVO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
    <result column="hobby_id" jdbcType="VARCHAR" property="hobbyId" />
    <result column="school_id" jdbcType="INTEGER" property="schoolId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, password, nick_name, hobby_id, school_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from login_user
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from login_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.jida.entity.LoginUserVO">
    insert into login_user (id, username, password, 
      nick_name, hobby_id, school_id
      )
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{nickName,jdbcType=VARCHAR}, #{hobbyId,jdbcType=VARCHAR}, #{schoolId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jida.entity.LoginUserVO">
    insert into login_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="hobbyId != null">
        hobby_id,
      </if>
      <if test="schoolId != null">
        school_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="hobbyId != null">
        #{hobbyId,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null">
        #{schoolId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jida.entity.LoginUserVO">
    update login_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="hobbyId != null">
        hobby_id = #{hobbyId,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null">
        school_id = #{schoolId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jida.entity.LoginUserVO">
    update login_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      hobby_id = #{hobbyId,jdbcType=VARCHAR},
      school_id = #{schoolId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByIdList" resultType="com.jida.entity.LoginUserVO">
        select * from login_user where id in 
      <foreach collection="list" open="(" close=")" item="item" separator=",">
        #{item}
      </foreach>
  </select>

  <select id="getNextSerialNo" resultType="java.lang.Long">
    select serial_no from serial_t where type = #{type}
  </select>

    <select id="getNextSerialNoForUpdate" resultType="java.lang.Long">
      select serial_no from serial_t where type = #{type} for update
    </select>

    <update id="updateSerial">
        update serial_t set serial_no = #{newVal} where type = #{type} and serial_no = #{oldVal}
  </update>
</mapper>